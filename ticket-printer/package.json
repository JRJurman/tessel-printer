{
  "name": "ticket-printer",
  "version": "0.2.0",
  "description": "This project is an automated solution to print tickets and items as they get assigned.",
  "author": {
    "name": "Jesse Jurman",
    "email": "j.r.jurman@gmail.com"
  },
  "babel": {
    "plugins": [
      "transform-es2015-block-scoped-functions",
      "transform-es2015-block-scoping",
      "transform-es2015-modules-commonjs"
    ]
  },
  "files": [
    "lib/"
  ],
  "main": "lib/ticket-printer.js",
  "scripts": {
    "prepublish": "not-in-install && npm run build:lib || in-install",
    "prebuild:lib": "rm -rf lib && mkdir lib",
    "build:lib": "babel src -o lib/ticket-printer.js",
    "build": "localinstall",
    "pretest": "babel tests/**/*.spec.js -o tests/tests.js",
    "test": "mocha tests/tests.js",
    "pretest:ci": "npm run pretest",
    "test:ci": "mocha tests/tests.js --reporter mocha-junit-reporter",
    "pretest:debug": "npm run pretest",
    "test:debug": "mocha --debug-brk=5858 tests/tests.js",
    "clean": "rm -rf node_modules && rm -rf lib && rm tests/tests.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/JRJurman/ticket-printer.git"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/JRJurman/ticket-printer/issues"
  },
  "homepage": "https://github.com/JRJurman/ticket-printer#readme",
  "devDependencies": {
    "babel-cli": "^6.10.1",
    "babel-plugin-transform-es2015-block-scoped-functions": "^6.8.0",
    "babel-plugin-transform-es2015-block-scoping": "^6.10.1",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.10.3",
    "chai": "^3.5.0",
    "chai-spies": "^0.7.1",
    "in-publish": "^2.0.0",
    "localinstall": "^1.2.0",
    "lolex": "^1.5.0",
    "mocha": "^2.5.3",
    "mocha-junit-reporter": "^1.11.1",
    "nock": "^8.0.0"
  },
  "optionalDependencies": {
    "github": "^2.2.0"
  },
  "readme": "# Ticket Printer\r\nThis project is an automated solution to print tickets and items as they get\r\nassigned. It is a library that exposes object standards and a server for making\r\nnew ticket sources (github, jira, trello, etc...) and printers (console,\r\nreceipt printer, web browser, etc...) easy to connect to each other.\r\n\r\n## Installation\r\nThis is a Node.js project, and requires npm and node to build the project. First\r\nclone or download the repository from github, and then run `npm install` in the\r\nroot directory to install all the dependencies.\r\n\r\n## Building, Testing, and other Scripts\r\nThis project contains several npm scripts to help build and test the project.  \r\n- `npm run build:lib`: builds the project into `lib/ticket-printer.js`, happens\r\nafter `npm install` by default.  \r\n- `npm run build`: does the above build, and prepares the library for testing,\r\nthis should be the command when developing on the project.  \r\n- `npm test`: runs mocha tests on the project\r\n- `npm run test:ci`: runs mocha tests and returns a report to be read by\r\ncircleci, happens after making a PR or new branch on github.\r\n- `npm run test:debug`: runs mocha tests with a debugger that can be inspected\r\non port 5858. You can use a node-debugger (such as atom's `Node Debugger`) to\r\nattach and inspect the process.\r\n\r\n## Running\r\nThis project has no executable, but it has example scripts in the\r\n`example_scripts` directory, which show basic use cases and demonstrate how to\r\nuse the bundled objects.\r\n\r\n## System Design\r\nThis project uses a combination of `watches`, `hooks`, and `printers` to get\r\nand print tickets at either a time interval, or on triggered events.\r\n\r\n![Getting Github tickets and turning them into receipts](design/system-design.png)\r\n\r\n### `ActivityWatcher`\r\nThe `ActivityWatcher` is the server that collects `watches`, `hooks`, and\r\n`printers` and acts as a mediator. `watches` and `hooks` do not need to know how\r\ntheir tickets will be printed, and `printers` do not need to know how to get new\r\ntickets, or who to get them from.\r\n\r\n#### `#constructor([environment])`\r\nBuilds the `ActivityWatcher` object, and can take in an environment variable for\r\nspecific settings when running.\r\n\r\n```javascript\r\nvar ActivityWatcher = require('ticket-printer').ActivityWatcher;\r\nvar aw = new ActivityWatcher({printLogs:true});\r\n```\r\n\r\n#### `#start(printInterval)`\r\nKicks off all the watches, and creates a loop that checks the print queue for\r\nnew tickets at the `printInterval`. `printInterval` should be in milliseconds,\r\nand should be faster than any of the watches, unless you want tickets to build\r\nup before printing them. If there is more than one ticket in the queue, they\r\nwill all be printed (for more information, look at `printQueue` below).  \r\n\r\n```javascript\r\nvar ActivityWatcher = require('ticket-printer').ActivityWatcher;\r\n\r\nvar aw = new ActivityWatcher({printLogs:true});\r\naw.start(1000);\r\n```\r\n\r\n#### `#addPrinter(printer)`\r\nAdds a printer object for watches and hooks to print to. You can use a bundled\r\nprinter or you can write your own printer (look at `printers` section).\r\n\r\n```javascript\r\nvar ActivityWatcher = require('ticket-printer').ActivityWatcher;\r\nvar consolePrinter = require('ticket-printer').consolePrinter;\r\n\r\nvar aw = new ActivityWatcher();\r\naw.addPrinter(consolePrinter);\r\n```\r\n\r\n#### `#addWatch(watch, interval)`\r\nAdds a watch object for printing tickets at an intervals. This is useful if you\r\ncan not add your own hooks to a project or organization. The interval is an\r\ninteger in milliseconds to check for new tickets from the watch. This is\r\nattached to the watch as `._interval`, so that the watch can be kicked off in\r\n`#start` (read above). You can use a bundled watch or you can write your own\r\nwatch (look at `watches` section).\r\n\r\n```javascript\r\nvar ActivityWatcher = require('ticket-printer').ActivityWatcher;\r\nvar timeWatch = require('ticket-printer').timeWatch;\r\n\r\nvar aw = new ActivityWatcher();\r\naw.addWatch(timeWatch, 1000);\r\n```\r\n\r\n#### `#addHook(hook)`\r\nAdds a hook object for printing tickets when an event occurs.  \r\n**TODO: This has yet to be defined**\r\n\r\n#### `#reset()`\r\nStops watches from running and removes all watches, hooks, and printers. It also\r\nstops the print check that happens after `#start`, and clears the print queue,\r\nif there were any tickets leftover.\r\n\r\n```javascript\r\nvar ActivityWatcher = require('ticket-printer').ActivityWatcher;\r\nvar timeWatch = require('ticket-printer').timeWatch;\r\n\r\nvar aw = new ActivityWatcher();\r\naw.addWatch(timeWatch, 1000);\r\naw.watches; // -> [ timeWatch ]\r\n\r\naw.reset();\r\naw.watches; // -> []\r\n```\r\n\r\n### `tickets`\r\nTickets are objects which are generated by `watches` and `hooks`, and are passed\r\non to (possibly multiple) printers by the `ActivityWatcher`. They have the\r\nfollowing properties:  \r\n- `watch`, a string, the name of the watch\r\n- `title`, a string, the title of the ticket\r\n- `project`, a string, the project that the ticket belongs to\r\n- `number`, a string, the id or number of the ticket\r\n- `body`, a string, the text content of the ticket\r\n\r\n```javascript\r\nvar exampleTicket = {\r\n  watch: \"Example Watch\",\r\n  title: \"Messages are lost in queue\",\r\n  project: \"Chats-R-Us\",\r\n  number: \"#27a\",\r\n  body: \"When sending messages using ...\"\r\n};\r\n```\r\n\r\n### `printQueue`\r\nThe `printQueue` is a queue that lives in ActivityWatcher. It is passed to the\r\n`getTicketObjects` function, which then can enqueue tickets to be printed\r\nwhenever the `ActivityWatcher` loops around to check it (see `#start` above). It\r\nwill always be a list of tickets to print, and pops off those tickets as it\r\nsends them to all the printers. If there are no printers, tickets are still\r\npopped off the queue.\r\n\r\n### `watches`\r\nWatches are javascript objects which are queried for tickets at a given time\r\ninterval. This is valuable when hooks are not available (due to permissions or\r\navailability) and manually checking via an API call would be easier. Watches\r\nneed to be added to an `ActivityWatcher`, and print to all the `printers` added\r\nto the `ActivityWatcher`.  \r\n\r\nWatches are expected to have the following properties:  \r\n- `name`, which maps to a string.  \r\n- `getTicketObjects`, which maps to a function that takes in a printQueue to\r\nmutate, and returns nothing. To print tickets in order, the `unshift` function\r\nshould be used to push tickets onto the queue. Look at `printQueue` above for\r\nmore details.\r\n\r\n```javascript\r\nvar exampleWatch = {\r\n  name: \"My First Watch\",\r\n  getTicketObjects: function( printQueue ) {\r\n    printQueue.unshift({\r\n      watch: \"Example Watch\",\r\n      title: \"Messages are lost in queue\",\r\n      project: \"Chats-R-Us\",\r\n      number: \"#27a\",\r\n      body: \"When sending messages using ...\"\r\n    });\r\n  }\r\n};\r\n```\r\n\r\n### `printers`\r\nPrinters are javascript objects which can print a ticket object. They are\r\nautomatically triggered by the `ActivityWatcher` when new tickets are found.\r\nExcept for testing, it is rare that you call the functions directly.  \r\n\r\nPrinters are expected to have the following properties:  \r\n- `name`, which maps to a string.\r\n- `printTicket`, which maps to a function that takes a ticket object\r\n\r\n```javascript\r\nvar examplePrinter = {\r\n  name: \"My First Printer\",\r\n  printTicket: function(ticket) {\r\n    console.log(ticket.name + \": \" + ticket.body);\r\n  }\r\n};\r\n```\r\n\r\n### `hooks`\r\n**TODO: This has yet to be defined**\r\n\r\n## Bundled Objects\r\nWith this project, there are several bundled examples to make understanding and\r\nworking with this project easier.\r\n\r\n### `timeWatch`\r\nThis is a bundled watch that always returns a single ticket with the current\r\ntime.\r\n\r\n### `consolePrinter`\r\nThis is a bundled printer that prints the ticket to the console.\r\n\r\n## Contributing\r\nIf you would like to contribute to this project, feel free to fork this\r\nrepository and make a Pull-Request. PRs should include new tests and\r\ndocumentation updates. Commits should be semi-formal. While the PR's description\r\nwill be reviewed first-and-foremost, commits should have a present-tense single\r\nline that details what will be added. For a clear example of what PRs should\r\nlook like, look at \r\n[one of the closed PRs](https://github.com/JRJurman/ticket-printer/pull/2).  \r\n\r\n### Issues\r\nIf you want to help contribute, but don't know what needs to be worked on, check\r\nthe issues tab on github. Anything on there that is not assigned is up-for-grabs\r\n. Issues with the\r\n[**help wanted**](https://github.com/JRJurman/ticket-printer/labels/help%20wanted)\r\nlabel are for comments and are encouraged to be picked up by other developers.\r\nIssues with the\r\n[**discussion**](https://github.com/JRJurman/ticket-printer/labels/discussion)\r\nlabel are for comments or feedback, usually on potential features or work items\r\nthat aren't completely defined yet, or need some fleshing out.  \r\n\r\n### Pull Requests\r\nThere are also Pull Requests with the\r\n[**needs review**](https://github.com/JRJurman/ticket-printer/labels/needs%20review)\r\nlabel. One way that anyone can contribute is by reviewing PRs with this label.\r\nThese PRs may include large code changes, or small README updates. If a PR looks\r\nconfusing, or is unclear, call it out! This project should be easy to approach\r\nand make changes to. If a new PR does not include enough documentation (in the\r\nform of comments, or in the README), then the PR should be updated.\r\n\r\n### Watches, Printers, Hooks, Oh My!\r\nIf you want to contribute by making new watches, printers, or hooks, that's\r\n100% encouraged! The dream is that this project becomes a great plug-and-play\r\nsystem, where people can hook up whatever ticket system they use into whatever\r\ndisplay they use. A web page that shows incoming JIRA cards, maybe a receipt\r\nprinter that prints github issues, or a text console that shows all the new\r\nTrello bugs for the day. The possibilities are endless!\r\n\r\n_New Watches, Printers, and Hooks should only introduce the minimum required\r\ndependencies, and these should be included as **optional dependencies**.\r\nI realize in the future, including several Node APIs may get out of hand. When\r\nthat happens, this project may go the way of babel (separate packages) however,\r\nthat's something we'll tackle once we hit that bridge._\r\n",
  "readmeFilename": "README.md",
  "dependencies": {
    "github": "^2.2.0"
  },
  "_id": "ticket-printer@0.2.0",
  "_shasum": "984ac15b23f21c7aa713bf259edab2da1eba75be",
  "_resolved": "file:ticket-printer-0.2.0.tgz",
  "_from": "ticket-printer-0.2.0.tgz"
}
